import streamlit as st
import numpy as np
import pandas as pd
import joblib
import shap
import matplotlib.pyplot as plt
import streamlit_authenticator as stauth

# === Load model v√† th√¥ng tin ===
model = joblib.load('lightgbm_churn_model.pkl')
selected_features = joblib.load('selected_features.pkl')
comparison_test_result = joblib.load('comparison_test_result.pkl')
scaler = joblib.load('scaler.pkl')

numeric_features = ['tenure', 'monthly_charges', 'total_charges']

st.set_page_config(layout='wide')
st.title('üìâ Customer Churn Prediction Dashboard')
# st.markdown('Ch·ªçn ch·∫ø ƒë·ªô nh·∫≠p d·ªØ li·ªáu ho·∫∑c ki·ªÉm th·ª≠ v·ªõi t·∫≠p test c√≥ s·∫µn ƒë·ªÉ xem kh·∫£ nƒÉng r·ªùi b·ªè v√† gi·∫£i th√≠ch m√¥ h√¨nh.')

# === Tab ƒëi·ªÅu h∆∞·ªõng ===
tab1, tab2 = st.tabs(["üßç Nh·∫≠p d·ªØ li·ªáu th·ªß c√¥ng", "üìÅ D·ªØ li·ªáu test c√≥ s·∫µn"])

# === TAB 1: NH·∫¨P D·ªÆ LI·ªÜU TH·ª¶ C√îNG ===
with tab1:
    with st.sidebar:
        st.header("üéõÔ∏è Nh·∫≠p th√¥ng tin kh√°ch h√†ng")

        tenure = st.slider('üìÖ Th·ªùi gian s·ª≠ d·ª•ng (th√°ng)', 0, 72, 12)
        monthly_charges = st.number_input('üíµ C∆∞·ªõc h√†ng th√°ng ($)', min_value=0.0, value=70.0)
        total_charges = st.number_input('üí∞ T·ªïng chi ti√™u ($)', min_value=0.0, value=1000.0)

        dependents_yes = 1 if st.selectbox('üë®‚Äçüë©‚Äçüëß C√≥ ng∆∞·ªùi ph·ª• thu·ªôc?', ['Kh√¥ng', 'C√≥']) == 'C√≥' else 0
        phone_service_yes = 1 if st.selectbox('üìû D·ªãch v·ª• ƒëi·ªán tho·∫°i?', ['Kh√¥ng', 'C√≥']) == 'C√≥' else 0
        internet_service_fiber_optic = 1 if st.selectbox('üåê S·ª≠ d·ª•ng c√°p quang?', ['Kh√¥ng', 'C√≥']) == 'C√≥' else 0
        online_security_yes = 1 if st.selectbox('üîê Online Security?', ['Kh√¥ng', 'C√≥']) == 'C√≥' else 0
        online_backup_yes = 1 if st.selectbox('üíæ Online Backup?', ['Kh√¥ng', 'C√≥']) == 'C√≥' else 0
        tech_support_yes = 1 if st.selectbox('üõ†Ô∏è Tech Support?', ['Kh√¥ng', 'C√≥']) == 'C√≥' else 0

        contract_type = st.selectbox('üìÑ Lo·∫°i h·ª£p ƒë·ªìng', ['Month-to-month', 'Two year', 'Kh√°c'])
        contract_month_to_month = 1 if contract_type == 'Month-to-month' else 0
        contract_two_year = 1 if contract_type == 'Two year' else 0

        paperless_billing_yes = 1 if st.selectbox('üßæ H√≥a ƒë∆°n ƒëi·ªán t·ª≠?', ['Kh√¥ng', 'C√≥']) == 'C√≥' else 0
        payment_method_electronic_check = 1 if st.selectbox('üí≥ Thanh to√°n b·∫±ng electronic check?', ['Kh√¥ng', 'C√≥']) == 'C√≥' else 0

    input_data = np.array([
        tenure,
        monthly_charges,
        total_charges,
        dependents_yes,
        phone_service_yes,
        internet_service_fiber_optic,
        online_security_yes,
        online_backup_yes,
        tech_support_yes,
        contract_month_to_month,
        contract_two_year,
        paperless_billing_yes,
        payment_method_electronic_check
    ]).reshape(1, -1)

    input_df = pd.DataFrame(input_data, columns=selected_features)
    input_df[numeric_features] = scaler.transform(input_df[numeric_features])

    if st.button('üîç D·ª± ƒëo√°n'):
        prediction = model.predict(input_df)[0]
        proba = model.predict_proba(input_df)[0][1]

        st.subheader('üìä K·∫øt qu·∫£ d·ª± ƒëo√°n:')
        if prediction == 1:
            st.error(f'‚ö†Ô∏è Kh√°ch h√†ng c√≥ th·ªÉ s·∫Ω r·ªùi b·ªè.\n\nX√°c su·∫•t: **{proba:.2%}**')
        else:
            st.success(f'‚úÖ Kh√°ch h√†ng c√≥ kh·∫£ nƒÉng ·ªü l·∫°i.\n\nX√°c su·∫•t r·ªùi b·ªè: **{proba:.2%}**')

        st.subheader("üìâ D·ªØ li·ªáu ƒë·∫ßu v√†o sau x·ª≠ l√Ω")
        st.dataframe(input_df.T, use_container_width=True)

        explainer = shap.TreeExplainer(model)
        shap_values = explainer.shap_values(input_df)
        shap_vals = shap_values[0] if isinstance(shap_values, list) else shap_values

        st.subheader("üß† Gi·∫£i th√≠ch b·∫±ng SHAP")
        fig, ax = plt.subplots()
        shap.waterfall_plot(shap.Explanation(
            values=shap_vals[0],
            base_values=explainer.expected_value[0] if isinstance(explainer.expected_value, list) else explainer.expected_value,
            data=input_df.iloc[0],
            feature_names=selected_features),
            max_display=13, show=False)
        st.pyplot(fig)

        top_features = pd.Series(shap_vals[0], index=selected_features).sort_values(key=abs, ascending=False)
        top_contribs = top_features.head(3)
        reasons = []
        for feat, val in top_contribs.items():
            direction = "tƒÉng" if val > 0 else "gi·∫£m"
            reasons.append(f"- `{feat}` c√≥ xu h∆∞·ªõng {direction} x√°c su·∫•t r·ªùi b·ªè (SHAP = {val:.3f})")

        st.markdown("**üìù Gi·∫£i th√≠ch t·ª± ƒë·ªông:**")
        if prediction == 1:
            st.write("Kh√°ch h√†ng c√≥ kh·∫£ nƒÉng r·ªùi b·ªè ch·ªß y·∫øu do:")
        else:
            st.write("Kh√°ch h√†ng c√≥ kh·∫£ nƒÉng ·ªü l·∫°i v√¨:")
        st.markdown("\n".join(reasons))

# === TAB 2: KI·ªÇM TH·ª¨ T·∫¨P D·ªÆ LI·ªÜU C√ì S·∫¥N ===
# === TAB 2: KI·ªÇM TH·ª¨ T·∫¨P D·ªÆ LI·ªÜU C√ì S·∫¥N ===
with tab2:
    st.subheader("üîÅ Ki·ªÉm th·ª≠ l·∫°i v·ªõi d·ªØ li·ªáu t·ª´ t·∫≠p test")

    test_idx = st.number_input("Ch·ªçn ch·ªâ s·ªë b·∫£n ghi ƒë·ªÉ ki·ªÉm th·ª≠ l·∫°i", 
                               min_value=0, 
                               max_value=len(comparison_test_result) - 1, 
                               value=0, 
                               step=1)

    test_sample = comparison_test_result.drop(columns=['true_label', 'predicted_label', 'correct']).iloc[[test_idx]]
    true_label = comparison_test_result.iloc[test_idx]['true_label']

    # Hi·ªÉn th·ªã chi ti·∫øt feature input l√™n tr∆∞·ªõc
    with st.expander("üßæ Xem chi ti·∫øt feature input c·ªßa b·∫£n ghi", expanded=True):
        st.dataframe(test_sample.T.rename(columns={test_sample.index[0]: f"B·∫£n ghi #{test_idx}"}), use_container_width=True)

    # D·ª± ƒëo√°n m·ªõi
    pred_new = model.predict(test_sample)[0]
    proba_new = model.predict_proba(test_sample)[0][1]

    st.markdown(f"""
    **üéØ B·∫£n ghi #{test_idx}**

    - Nh√£n th·∫≠t: **{true_label}**
    - D·ª± ƒëo√°n m·ªõi: **{pred_new}**
    - X√°c su·∫•t r·ªùi b·ªè: **{proba_new:.2%}**
    """)

    if pred_new == true_label:
        st.success("‚úÖ D·ª± ƒëo√°n  ƒë√∫ng nh∆∞ nh√£n th·∫≠t.")
    else:
        st.error("‚ùå D·ª± ƒëo√°n KH√îNG kh·ªõp v·ªõi nh√£n th·∫≠t.")

    # Bi·ªÉu ƒë·ªì SHAP
    st.subheader("üß† Bi·ªÉu ƒë·ªì SHAP cho b·∫£n ghi")
    explainer = shap.TreeExplainer(model)
    shap_values_test = explainer.shap_values(test_sample)
    shap_vals_test = shap_values_test[0] if isinstance(shap_values_test, list) else shap_values_test

    fig2, ax2 = plt.subplots()
    shap.waterfall_plot(shap.Explanation(
        values=shap_vals_test[0],
        base_values=explainer.expected_value[0] if isinstance(explainer.expected_value, list) else explainer.expected_value,
        data=test_sample.iloc[0],
        feature_names=selected_features),
        max_display=13, show=False)
    st.pyplot(fig2)

    # Gi·∫£i th√≠ch t·ª± ƒë·ªông
    top_features_test = pd.Series(shap_vals_test[0], index=selected_features).sort_values(key=abs, ascending=False)
    top_contribs_test = top_features_test.head(3)
    reasons_test = []
    for feat, val in top_contribs_test.items():
        direction = "tƒÉng" if val > 0 else "gi·∫£m"
        reasons_test.append(f"- `{feat}` c√≥ xu h∆∞·ªõng {direction} x√°c su·∫•t r·ªùi b·ªè (SHAP = {val:.3f})")

    st.markdown("**üìù Gi·∫£i th√≠ch t·ª± ƒë·ªông:**")
    if pred_new == 1:
        st.write("Kh√°ch h√†ng n√†y c√≥ th·ªÉ r·ªùi b·ªè ch·ªß y·∫øu do:")
    else:
        st.write("Kh√°ch h√†ng n√†y c√≥ kh·∫£ nƒÉng ·ªü l·∫°i v√¨:")
    st.markdown("\n".join(reasons_test))
