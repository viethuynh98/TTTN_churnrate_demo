import streamlit as st
import numpy as np
import joblib

# Load model v√† feature selector
model = joblib.load('lightgbm_churn_model.pkl')
feature_selector = joblib.load('feature_selector.pkl')  # n·∫øu c·∫ßn, ho·∫∑c b·ªè n·∫øu ƒë√£ l·ªçc t·ª´ tr∆∞·ªõc

st.title('Customer Churn Prediction App üìâ')
st.markdown('Nh·∫≠p th√¥ng tin kh√°ch h√†ng b√™n d∆∞·ªõi ƒë·ªÉ d·ª± ƒëo√°n kh·∫£ nƒÉng r·ªùi b·ªè.')

# ======= Form nh·∫≠p li·ªáu =======
tenure = st.slider('Th·ªùi gian s·ª≠ d·ª•ng (th√°ng)', 0, 72, 12)
monthly_charges = st.number_input('C∆∞·ªõc h√†ng th√°ng ($)', min_value=0.0, value=70.0)
total_charges = st.number_input('T·ªïng chi ti√™u ($)', min_value=0.0, value=1000.0)

dependents_yes = st.selectbox('C√≥ ng∆∞·ªùi ph·ª• thu·ªôc?', ['Kh√¥ng', 'C√≥']) == 'C√≥'
internet_service = st.selectbox('Lo·∫°i d·ªãch v·ª• Internet', ['Fiber optic', 'DSL/Kh√°c', 'Kh√¥ng s·ª≠ d·ª•ng'])
online_security_yes = st.selectbox('C√≥ s·ª≠ d·ª•ng Online Security?', ['Kh√¥ng', 'C√≥']) == 'C√≥'
tech_support_yes = st.selectbox('C√≥ s·ª≠ d·ª•ng Tech Support?', ['Kh√¥ng', 'C√≥']) == 'C√≥'

contract = st.selectbox('Lo·∫°i h·ª£p ƒë·ªìng', ['Month-to-month', 'One year', 'Two year'])
paperless_billing_yes = st.selectbox('C√≥ s·ª≠ d·ª•ng h√≥a ƒë∆°n ƒëi·ªán t·ª≠?', ['Kh√¥ng', 'C√≥']) == 'C√≥'
payment_method = st.selectbox('Ph∆∞∆°ng th·ª©c thanh to√°n', ['Electronic check', 'Kh√°c'])

# ======= Chuy·ªÉn d·ªØ li·ªáu th√†nh vector input =======
input_data = np.array([
    tenure,
    monthly_charges,
    total_charges,
    int(dependents_yes),
    int(internet_service == 'Fiber optic'),
    int(internet_service == 'Kh√¥ng s·ª≠ d·ª•ng'),
    int(online_security_yes),
    int(tech_support_yes),
    int(contract == 'Month-to-month'),
    int(contract == 'One year'),
    int(contract == 'Two year'),
    int(paperless_billing_yes),
    int(payment_method == 'Electronic check')
]).reshape(1, -1)

# ======= D·ª± ƒëo√°n =======
if st.button('D·ª± ƒëo√°n'):
    prediction = model.predict(input_data)[0]
    proba = model.predict_proba(input_data)[0][1]

    st.subheader('K·∫øt qu·∫£ d·ª± ƒëo√°n:')
    if prediction == 1:
        st.error(f'‚ö†Ô∏è Kh√°ch h√†ng c√≥ th·ªÉ s·∫Ω r·ªùi b·ªè. X√°c su·∫•t: {proba:.2%}')
    else:
        st.success(f'‚úÖ Kh√°ch h√†ng c√≥ kh·∫£ nƒÉng s·∫Ω ·ªü l·∫°i. X√°c su·∫•t r·ªùi b·ªè: {proba:.2%}')
