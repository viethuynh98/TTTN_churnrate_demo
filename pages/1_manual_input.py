import streamlit as st
import pandas as pd
from pipeline.pipepline_module import (
    preprocess_input_data,
    transform_input_data,
    predict_churn
)

st.set_page_config(page_title="Telco Churn Prediction - Manual Input", layout="wide")
st.title("‚úçÔ∏è D·ª± ƒëo√°n churn t·ª´ d·ªØ li·ªáu nh·∫≠p tay")

st.markdown("""
H√£y ƒëi·ªÅn th√¥ng tin c·ªßa m·ªôt kh√°ch h√†ng b√™n d∆∞·ªõi ƒë·ªÉ d·ª± ƒëo√°n **kh·∫£ nƒÉng r·ªùi b·ªè (churn probability)**.
""")

with st.form("manual_input_form"):
    col1, col2, col3 = st.columns(3)

    with col1:
        gender = st.selectbox("Gi·ªõi t√≠nh", ["Male", "Female"], index=0)
        senior_citizen = st.selectbox("Kh√°ch h√†ng cao tu·ªïi?", [0, 1], index=0)
        partner = st.selectbox("C√≥ v·ª£/ch·ªìng?", ["Yes", "No"], index=1)
        dependents = st.selectbox("C√≥ ng∆∞·ªùi ph·ª• thu·ªôc?", ["Yes", "No"], index=1)
        tenure = st.number_input("Th·ªùi gian s·ª≠ d·ª•ng (th√°ng)", min_value=0, max_value=100, step=1, value=24)
        phone_service = st.selectbox("S·ª≠ d·ª•ng ƒëi·ªán tho·∫°i?", ["Yes", "No"], index=0)
        multiple_lines = st.selectbox("Nhi·ªÅu ƒë∆∞·ªùng d√¢y?", ["Yes", "No", "No phone service"], index=1)

    with col2:
        internet_service = st.selectbox("Lo·∫°i Internet", ["DSL", "Fiber optic", "No"], index=0)
        online_security = st.selectbox("B·∫£o m·∫≠t online?", ["Yes", "No", "No internet service"], index=1)
        online_backup = st.selectbox("Sao l∆∞u online?", ["Yes", "No", "No internet service"], index=1)
        device_protection = st.selectbox("B·∫£o v·ªá thi·∫øt b·ªã?", ["Yes", "No", "No internet service"], index=1)
        tech_support = st.selectbox("H·ªó tr·ª£ k·ªπ thu·∫≠t?", ["Yes", "No", "No internet service"], index=1)
        streaming_tv = st.selectbox("Xem TV online?", ["Yes", "No", "No internet service"], index=1)
        streaming_movies = st.selectbox("Xem phim online?", ["Yes", "No", "No internet service"], index=1)

    with col3:
        contract = st.selectbox("Lo·∫°i h·ª£p ƒë·ªìng", ["Month-to-month", "One year", "Two year"], index=0)
        paperless_billing = st.selectbox("H√≥a ƒë∆°n ƒëi·ªán t·ª≠?", ["Yes", "No"], index=0)
        payment_method = st.selectbox("H√¨nh th·ª©c thanh to√°n", [
            "Electronic check", "Mailed check", "Bank transfer (automatic)", "Credit card (automatic)"
        ], index=0)
        monthly_charges = st.number_input("Ph√≠ h√†ng th√°ng ($)", min_value=0.0, step=0.1, value=70.0)
        total_charges = st.number_input("T·ªïng chi ti√™u ($)", min_value=0.0, step=0.1, value=1500.0)

    submitted = st.form_submit_button("üöÄ D·ª± ƒëo√°n")

if submitted:
    try:
        input_dict = {
            "gender": [gender],
            "senior_citizen": [senior_citizen],
            "partner": [partner],
            "dependents": [dependents],
            "tenure": [tenure],
            "phone_service": [phone_service],
            "multiple_lines": [multiple_lines],
            "internet_service": [internet_service],
            "online_security": [online_security],
            "online_backup": [online_backup],
            "device_protection": [device_protection],
            "tech_support": [tech_support],
            "streaming_tv": [streaming_tv],
            "streaming_movies": [streaming_movies],
            "contract": [contract],
            "paperless_billing": [paperless_billing],
            "payment_method": [payment_method],
            "monthly_charges": [monthly_charges],
            "total_charges": [total_charges]
        }

        df_input = pd.DataFrame(input_dict)

        # Ti·ªÅn x·ª≠ l√Ω    
        df_processed = preprocess_input_data(df_input)
        df_transformed = transform_input_data(df_processed)
        df_result = predict_churn(df_transformed)

        # ‚úÖ In k·∫øt qu·∫£ df_result
        st.subheader("üìÑ K·∫øt qu·∫£ ƒë·∫ßy ƒë·ªß:")
        st.dataframe(df_result, use_container_width=True)


       # Hi·ªÉn th·ªã x√°c su·∫•t churn
        prob = df_result['churn_probability'].values[0]
        st.success(f"üîÆ X√°c su·∫•t churn c·ªßa kh√°ch h√†ng n√†y l√†: **{prob:.2%}**")

        if prob > 0.5:
            st.warning("‚ö†Ô∏è Kh√°ch h√†ng c√≥ nguy c∆° **r·ªùi b·ªè cao**!")
        else:
            st.info("‚úÖ Kh√°ch h√†ng c√≥ **nguy c∆° r·ªùi b·ªè th·∫•p**.")

        # === Gi·∫£i th√≠ch b·∫±ng SHAP ===
        import shap
        import joblib
        import matplotlib.pyplot as plt

        st.subheader("üß† Gi·∫£i th√≠ch b·∫±ng SHAP")

        # Load l·∫°i model, scaler, feature list
        model = joblib.load('models/lightgbm_churn_model_ver2.pkl')
        selected_features = joblib.load('models/selected_features.pkl')

        input_for_shap = df_result[selected_features].copy()

        # SHAP explain
        explainer = shap.TreeExplainer(model)
        shap_values = explainer.shap_values(input_for_shap)
        shap_vals = shap_values[0] if isinstance(shap_values, list) else shap_values

        # V·∫Ω bi·ªÉu ƒë·ªì waterfall
        fig, ax = plt.subplots()
        shap.waterfall_plot(shap.Explanation(
            values=shap_vals[0],
            base_values=explainer.expected_value[0] if isinstance(explainer.expected_value, list) else explainer.expected_value,
            data=input_for_shap.iloc[0],
            feature_names=selected_features),
            max_display=13, show=False)
        st.pyplot(fig)

        # Gi·∫£i th√≠ch t·ª± ƒë·ªông
        top_features = pd.Series(shap_vals[0], index=selected_features).sort_values(key=abs, ascending=False)
        top_contribs = top_features.head(3)
        reasons = []
        for feat, val in top_contribs.items():
            direction = "tƒÉng" if val > 0 else "gi·∫£m"
            reasons.append(f"- `{feat}` c√≥ xu h∆∞·ªõng {direction} x√°c su·∫•t r·ªùi b·ªè (SHAP = {val:.3f})")

        st.markdown("**üìù Gi·∫£i th√≠ch t·ª± ƒë·ªông:**")
        if prob > 0.5:
            st.write("Kh√°ch h√†ng c√≥ kh·∫£ nƒÉng r·ªùi b·ªè ch·ªß y·∫øu do:")
        else:
            st.write("Kh√°ch h√†ng c√≥ kh·∫£ nƒÉng ·ªü l·∫°i v√¨:")
        st.markdown("\n".join(reasons))

    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")
